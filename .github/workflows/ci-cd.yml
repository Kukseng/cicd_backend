name: Backend CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      # Temporary Postgres for CI testing
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: stackquiz-user
          POSTGRES_PASSWORD: stackquiz@123
          POSTGRES_DB: stackquiz-db
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U stackquiz-user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      # Temporary Redis for CI testing
      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Make Gradle wrapper executable
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      # Build & Test
      - name: Build & Test
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/stackquiz-db
          SPRING_DATASOURCE_USERNAME: stackquiz-user
          SPRING_DATASOURCE_PASSWORD: stackquiz@123
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      # Build Docker Image
      - name: Build Docker image
        run: docker build -t stackquiz-backend:latest .

      # Push Docker Image to DockerHub
      - name: Push Docker image
        run: |
          echo "${{ secrets.PASSWORD }}" | docker login -u ${{ secrets.USERNAME }} --password-stdin
      - name: Build Docker Image
        run: docker build -t ${{ secrets.USERNAME }}/${{env.IMAGE_NAME }}:${{ env.TAG }} .
      - name: Push the Docker image 
        run: |
          docker push ${{ secrets.USERNAME }}/${{env.IMAGE_NAME }}:${{ env.TAG }}
      - name: Logout from the Registry
        if: always()
        run: |
          docker logout 
